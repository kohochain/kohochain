package io.fortest.common.utils;

import static java.nio.charset.StandardCharsets.UTF_8;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.util.Properties;
import lombok.extern.slf4j.Slf4j;

@Slf4j
public class PropUtil {

  public static String readProperty(String file, String key) {
    InputStream is = null;
    FileInputStream fis = null;
    Properties prop;
    try {
      prop = new Properties();
      fis = new FileInputStream(file);
      is = new BufferedInputStream(fis);
      prop.load(is);
      String value = new String(prop.getProperty(key, "").getBytes("ISO-8859-1"), "UTF-8");
      return value;
    } catch (Exception e) {
      logger.error("{}", e);
      return "";
    } finally {
      try {
        if (fis != null) {
          fis.close();
        }
      } catch (Exception e) {
        logger.warn("{}", e);
      }

      try {
        if (is != null) {
          is.close();
        }
      } catch (Exception e) {
        logger.error("{}", e);
      }
    }
  }

  public static boolean writeProperty(String file, String key, String value) {
    FileInputStream in = null;
    OutputStream out = null;
    BufferedReader br = null;
    BufferedWriter bw = null;
    Properties properties = new Properties();

    try {
      in = new FileInputStream(file);
      br = new BufferedReader(new InputStreamReader(in, UTF_8));
      properties.load(br);
      out = new FileOutputStream(file);
      bw = new BufferedWriter(new OutputStreamWriter(out, UTF_8));
      properties.setProperty(key, value);
      properties.store(bw, "Generated by the application.  PLEASE DO NOT EDIT! ");
      return true;
    } catch (Exception e) {
      logger.warn("{}", e);
      return false;
    } finally {
      try {
        if (in != null) {
          in.close();
        }
      } catch (Exception e) {
        logger.warn("{}", e);
      }

      try {
        if (br != null) {
          br.close();
        }
      } catch (Exception e) {
        logger.warn("{}", e);
      }

      try {
        if (out != null) {
          out.close();
        }
      } catch (Exception e) {
        logger.warn("{}", e);
      }

      try {
        if (bw != null) {
          bw.close();
        }
      } catch (Exception e) {
        logger.warn("{}", e);
      }
    }

  }

}